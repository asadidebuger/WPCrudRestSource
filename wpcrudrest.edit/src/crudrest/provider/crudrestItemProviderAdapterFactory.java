/**
 */
package crudrest.provider;

import crudrest.util.crudrestAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class crudrestItemProviderAdapterFactory extends crudrestAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public crudrestItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.PluginCreator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PluginCreatorItemProvider pluginCreatorItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.PluginCreator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPluginCreatorAdapter() {
		if (pluginCreatorItemProvider == null) {
			pluginCreatorItemProvider = new PluginCreatorItemProvider(this);
		}

		return pluginCreatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.CrudRestPlugin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CrudRestPluginItemProvider crudRestPluginItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.CrudRestPlugin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCrudRestPluginAdapter() {
		if (crudRestPluginItemProvider == null) {
			crudRestPluginItemProvider = new CrudRestPluginItemProvider(this);
		}

		return crudRestPluginItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.PluginDetail} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PluginDetailItemProvider pluginDetailItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.PluginDetail}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPluginDetailAdapter() {
		if (pluginDetailItemProvider == null) {
			pluginDetailItemProvider = new PluginDetailItemProvider(this);
		}

		return pluginDetailItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.PluginWebService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PluginWebServiceItemProvider pluginWebServiceItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.PluginWebService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPluginWebServiceAdapter() {
		if (pluginWebServiceItemProvider == null) {
			pluginWebServiceItemProvider = new PluginWebServiceItemProvider(this);
		}

		return pluginWebServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.WebserviceFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebserviceFunctionItemProvider webserviceFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.WebserviceFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebserviceFunctionAdapter() {
		if (webserviceFunctionItemProvider == null) {
			webserviceFunctionItemProvider = new WebserviceFunctionItemProvider(this);
		}

		return webserviceFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldItemProvider fieldItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAdapter() {
		if (fieldItemProvider == null) {
			fieldItemProvider = new FieldItemProvider(this);
		}

		return fieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.Relation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationItemProvider relationItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.Relation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationAdapter() {
		if (relationItemProvider == null) {
			relationItemProvider = new RelationItemProvider(this);
		}

		return relationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.PluginGUI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PluginGUIItemProvider pluginGUIItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.PluginGUI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPluginGUIAdapter() {
		if (pluginGUIItemProvider == null) {
			pluginGUIItemProvider = new PluginGUIItemProvider(this);
		}

		return pluginGUIItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.Layout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayoutItemProvider layoutItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.Layout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayoutAdapter() {
		if (layoutItemProvider == null) {
			layoutItemProvider = new LayoutItemProvider(this);
		}

		return layoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.Menu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuItemProvider menuItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.Menu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuAdapter() {
		if (menuItemProvider == null) {
			menuItemProvider = new MenuItemProvider(this);
		}

		return menuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.MenuItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuItemItemProvider menuItemItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.MenuItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuItemAdapter() {
		if (menuItemItemProvider == null) {
			menuItemItemProvider = new MenuItemItemProvider(this);
		}

		return menuItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.UIPage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIPageItemProvider uiPageItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.UIPage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIPageAdapter() {
		if (uiPageItemProvider == null) {
			uiPageItemProvider = new UIPageItemProvider(this);
		}

		return uiPageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.Form} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormItemProvider formItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.Form}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormAdapter() {
		if (formItemProvider == null) {
			formItemProvider = new FormItemProvider(this);
		}

		return formItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.FieldLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldLayoutItemProvider fieldLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.FieldLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldLayoutAdapter() {
		if (fieldLayoutItemProvider == null) {
			fieldLayoutItemProvider = new FieldLayoutItemProvider(this);
		}

		return fieldLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.List} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListItemProvider listItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.List}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListAdapter() {
		if (listItemProvider == null) {
			listItemProvider = new ListItemProvider(this);
		}

		return listItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.BulkAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BulkActionItemProvider bulkActionItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.BulkAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBulkActionAdapter() {
		if (bulkActionItemProvider == null) {
			bulkActionItemProvider = new BulkActionItemProvider(this);
		}

		return bulkActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.FieldBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldBaseItemProvider fieldBaseItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.FieldBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldBaseAdapter() {
		if (fieldBaseItemProvider == null) {
			fieldBaseItemProvider = new FieldBaseItemProvider(this);
		}

		return fieldBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.FieldTypeRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldTypeRepositoryItemProvider fieldTypeRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.FieldTypeRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldTypeRepositoryAdapter() {
		if (fieldTypeRepositoryItemProvider == null) {
			fieldTypeRepositoryItemProvider = new FieldTypeRepositoryItemProvider(this);
		}

		return fieldTypeRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.FieldType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldTypeItemProvider fieldTypeItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.FieldType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldTypeAdapter() {
		if (fieldTypeItemProvider == null) {
			fieldTypeItemProvider = new FieldTypeItemProvider(this);
		}

		return fieldTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.DBFieldConfig} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DBFieldConfigItemProvider dbFieldConfigItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.DBFieldConfig}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDBFieldConfigAdapter() {
		if (dbFieldConfigItemProvider == null) {
			dbFieldConfigItemProvider = new DBFieldConfigItemProvider(this);
		}

		return dbFieldConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link crudrest.VueElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VueElementItemProvider vueElementItemProvider;

	/**
	 * This creates an adapter for a {@link crudrest.VueElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVueElementAdapter() {
		if (vueElementItemProvider == null) {
			vueElementItemProvider = new VueElementItemProvider(this);
		}

		return vueElementItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (pluginCreatorItemProvider != null) pluginCreatorItemProvider.dispose();
		if (crudRestPluginItemProvider != null) crudRestPluginItemProvider.dispose();
		if (pluginDetailItemProvider != null) pluginDetailItemProvider.dispose();
		if (pluginWebServiceItemProvider != null) pluginWebServiceItemProvider.dispose();
		if (webserviceFunctionItemProvider != null) webserviceFunctionItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (fieldItemProvider != null) fieldItemProvider.dispose();
		if (relationItemProvider != null) relationItemProvider.dispose();
		if (pluginGUIItemProvider != null) pluginGUIItemProvider.dispose();
		if (layoutItemProvider != null) layoutItemProvider.dispose();
		if (menuItemProvider != null) menuItemProvider.dispose();
		if (menuItemItemProvider != null) menuItemItemProvider.dispose();
		if (uiPageItemProvider != null) uiPageItemProvider.dispose();
		if (formItemProvider != null) formItemProvider.dispose();
		if (fieldLayoutItemProvider != null) fieldLayoutItemProvider.dispose();
		if (listItemProvider != null) listItemProvider.dispose();
		if (bulkActionItemProvider != null) bulkActionItemProvider.dispose();
		if (fieldBaseItemProvider != null) fieldBaseItemProvider.dispose();
		if (fieldTypeRepositoryItemProvider != null) fieldTypeRepositoryItemProvider.dispose();
		if (fieldTypeItemProvider != null) fieldTypeItemProvider.dispose();
		if (dbFieldConfigItemProvider != null) dbFieldConfigItemProvider.dispose();
		if (vueElementItemProvider != null) vueElementItemProvider.dispose();
	}

}
