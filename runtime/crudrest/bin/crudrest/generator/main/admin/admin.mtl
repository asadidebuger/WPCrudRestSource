[comment encoding = Cp1256 /]
[module admin('http://crudrest.msde.ui.ac.ir')/]
[import crudrest::generator::main::service/]
[template public admin(plg : CrudRestPlugin,directory:String, prefix:String, td:String)]

[file (directory+'/admin/index.php', false, 'UTF-8')]
<?php // Silence is golden
[/file]

[file (directory+'/admin/'+ prefix +'_admin.php', false, 'UTF-8')]
<?php

/**
 * The admin-specific functionality of the plugin.
 *
 * Defines the plugin name, version, and two examples hooks for how to
 * enqueue the admin-specific stylesheet and JavaScript.
 *
[getCopyrightComment()/]
 */
require [prefix/]_PATH.'admin/[prefix/]_admin_menu_page.php';
require [prefix/]_PATH.'includes/[prefix/]_Page.php';

class [prefix/]_Admin {


	private $plg;

	/**
	 * The ID of this plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string    $plugin_name    The ID of this plugin.
	 */
	private $plugin_name;

	/**
	 * The version of this plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string    $version    The current version of this plugin.
	 */
	private $version;

	/**
	 * Initialize the class and set its properties.
	 *
	 * @since    1.0.0
	 * @param      string    $plugin_name       The name of this plugin.
	 * @param      string    $version    The version of this plugin.
	 */
	public function __construct($plg, $plugin_name, $version ) {

		$this->plg=$plg;
		$this->plugin_name = $plugin_name;
		$this->version = $version;

	}

	/**
	 * Register the stylesheets for the admin area.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_styles() {

		/**
		 * This function is provided for demonstration purposes only.
		 *
		 * An instance of this class should be passed to the run() function
		 * defined in Plugin_Name_Loader as all of the hooks are defined
		 * in that particular class.
		 *
		 * The Plugin_Name_Loader will then create the relationship
		 * between the defined hooks and the functions defined in this
		 * class.
		 */

		wp_enqueue_style( 'Roboto', 'https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900', array(), false, 'all' );
		wp_enqueue_style( 'materialdesignicons', 'https://cdn.jsdelivr.net/npm/@mdi/font@6.x/css/materialdesignicons.min.css', array(), false, 'all' );
		wp_enqueue_style( 'vuetify', 'https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css', array(), false, 'all' );
		wp_enqueue_style( $this->plugin_name, plugin_dir_url( __FILE__ ) . 'css/[prefix/]-admin.css', array(), $this->version, 'all' );
	}

	/**
	 * Register the JavaScript for the admin area.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_scripts() {

		/**
		 * This function is provided for demonstration purposes only.
		 *
		 * An instance of this class should be passed to the run() function
		 * defined in Plugin_Name_Loader as all of the hooks are defined
		 * in that particular class.
		 *
		 * The Plugin_Name_Loader will then create the relationship
		 * between the defined hooks and the functions defined in this
		 * class.
		 */

		wp_enqueue_script('vue','https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.min.js');
		wp_enqueue_script('vuetify','https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.js');
		wp_enqueue_script( $this->plugin_name, plugin_dir_url( __FILE__ ) . 'js/[prefix/]-admin.js', array( 'jquery' ), $this->version, false );
	}
[if (plg.gui.menu->size()>0)]
[for(menu:Menu|plg.gui.menu)]
	public function handle_page_[menu.slug/](){
		$page=new [prefix/]_admin_menu_page('[menu.slug/]');
		$page->render();
	}
	[for(item:MenuItem|menu.items)]
	public function handle_page_[menu.slug/]_[item.page.key/](){
		$page=[prefix/]_Models::get_page('[item.page.key/]');
		$page->renderList();
	}
	[/for]
[/for]
[/if]
[if(plg.hasAccessControl)]
	public function handle_options_page(){
		require [prefix/]_PATH.'admin/[prefix/]_admin_options_page.php';
		$options_page=new [prefix/]_admin_options_page('options_[prefix/]',__('[plg.name/] Options','[td/]'));
		$options_page->render();

	}
[/if]
	public function add_menu()
	  {
[if(plg.hasAccessControl)]
		add_options_page( __('[plg.name/] Options', '[td/]'), __('[plg.name/]', '[td/]'), 'manage_options', 'options_[prefix/]', array($this,'handle_options_page'));
[/if]
		$admin_menus=[prefix/]_Models::get_admin_menus();
		foreach ($admin_menus as $slug => $menu){
		  add_menu_page(['$menu[\'title\'], $menu[\'title\']'/], 'activate_plugins',$slug,array($this,'handle_page_'.$slug),['$menu[\'icon\']'/]);
		  foreach ($menu['[\'sub\']'/] as $itemSlug => $menuItem) {
[if(plg.hasAccessControl)]
			if (current_user_can('[prefix/]_page_'.$menuItem['[\'page_key\']'/].'_list'))
[/if]
 				add_submenu_page($slug,['$menuItem[\'pageTitle\']'/], ['$menuItem[\'title\']'/], 'activate_plugins',$slug.'-'.$itemSlug , array($this,'handle_page_'.$slug.'_'.$itemSlug));
		  }
		}
	  }

}
[/file]


[/template]
