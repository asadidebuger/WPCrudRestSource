[comment encoding = Cp1256 /]
[module ws('http://crudrest.msde.ui.ac.ir')/]
[import crudrest::generator::main::service/]
[template public ws(plg : CrudRestPlugin,directory:String, prefix:String, td:String)]

[file (directory+'/ws/index.php', false, 'UTF-8')]
<?php // Silence is golden
[/file]
[file (directory+'/ws/'+ prefix +'_ws.php', false, 'UTF-8')]
<?php
/**
 *
[getCopyrightComment('4.7.0')/]
 **/
[for(entity:crudrest::Entity|plg.serviceProvider.entityModel)]
require '[prefix +'_controller_'+entity.key+'.php'/]';
[/for]
[for(page:crudrest::UIPage|plg.gui.page)]
require '[prefix +'_controller_page_'+page.key+'.php'/]';
[/for]
require '[prefix/]_page_controller.php';
require '[prefix/]_extend_controller.php';
[if(plg.hasAccessControl)]
require '[prefix/]_options_controller.php';
[/if]
class [prefix/]_ws{
[for(entity:crudrest::Entity|plg.serviceProvider.entityModel)]
 private $[entity.key/];
[/for]
[for(page:crudrest::UIPage|plg.gui.page)]
 private $page_[page.key/];
[/for]
 private $page_controller;
 private $extend_controller;
[if(plg.hasAccessControl)]
 private $options_controller;
[/if]

  public function __construct(){
[for(entity:crudrest::Entity|plg.serviceProvider.entityModel)]
	$this->[entity.key/]=new [prefix +'_controller_'+entity.key/]();
[/for]
[for(page:crudrest::UIPage|plg.gui.page)]
	$this->page_[page.key/]=new [prefix +'_controller_page_'+page.key/]();
[/for]
	$this->page_controller=new [prefix/]_page_controller();
	$this->extend_controller=new [prefix/]_extend_controller();
[if(plg.hasAccessControl)]
	$this->options_controller=new [prefix/]_options_controller();
[/if]
	add_action( 'rest_api_init',array($this,'init_routes'),90 );
  }

 /**
 * REST webservice enabler.
 */
  public function init_routes(){
[for(entity:crudrest::Entity|plg.serviceProvider.entityModel)]
	$this->[entity.key/]->register_routes();
[/for]
[for(page:crudrest::UIPage|plg.gui.page)]
	$this->page_[page.key/]->register_routes();
[/for]
	$this->page_controller->register_routes();
	$this->extend_controller->register_routes();
[if(plg.hasAccessControl)]
	$this->options_controller->register_routes();
[/if]
  }
}

[/file]

[file (directory+'/ws/'+ prefix +'_controller.php', false, 'UTF-8')]
<?php

 /**
 * Base Controller class for REST webservice.
 *
[plg.getCopyrightComment(plg,'4.7.0')/]
 */ 
class [prefix/]_controller extends WP_REST_Controller {

  protected $key='';
  protected $entity_key='';
  protected $page_key='';
  protected $version=1;

  public function __construct($key, $entity_key, $page_key='',$version=1) {
	$this->key = $key;
	$this->entity_key = $entity_key;
	$this->page_key = $page_key;
	$this->version = $version;
  }

 /**
 * Register the routes for the objects of the controller.
 */
  public function register_routes() {

	$version = $this->version;
	$namespace = '[prefix/]/v' . $version; //wp-json/[prefix/]/.$this->version;
	$base = $this->key;

	register_rest_route( $namespace, '/' . $base, array(
		array(
			'methods'             => WP_REST_Server::READABLE,
			'callback'            => array( $this, 'get_items' ),
			'permission_callback' => array( $this, 'get_items_permissions_check' ),
			'args'                => $this->get_collection_params(),
		),
		array(
			'methods'             => WP_REST_Server::CREATABLE,
			'callback'            => array( $this, 'create_item' ),
			'permission_callback' => array( $this, 'create_item_permissions_check' ),
			'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::CREATABLE ),
		),
	) );
	register_rest_route( $namespace, '/mini/' . $base, array(
		array(
			'methods'             => WP_REST_Server::READABLE,
			'callback'            => array( $this, 'get_items_mini' ),
			'permission_callback' => array( $this, 'get_items_permissions_check' ),
			'args'                => $this->get_collection_params(),
		),
	) );
	register_rest_route( $namespace, '/' . $base . '['/(?P<id>[\\d]+)'/]', array(
		array(
			'methods'             => WP_REST_Server::READABLE,
			'callback'            => array( $this, 'get_item' ),
			'permission_callback' => array( $this, 'get_item_permissions_check' ),
			'args'                => $this->get_item_params(),
		),
		array(
			'methods'             => WP_REST_Server::EDITABLE,
			'callback'            => array( $this, 'update_item' ),
			'permission_callback' => array( $this, 'update_item_permissions_check' ),
			'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::EDITABLE ),
		),
		array(
			'methods'             => WP_REST_Server::DELETABLE,
			'callback'            => array( $this, 'delete_item' ),
			'permission_callback' => array( $this, 'delete_item_permissions_check' ),
			'args'                => array(	),
		),
	) );

	register_rest_route( $namespace, '/' . $base . '['/bulk/(?P<key>[a-zA-Z0-9]+)/'/]', array(

		array(
			'methods'             => WP_REST_Server::EDITABLE,
			'callback'            => array( $this, 'bulk_action' ),
			'permission_callback' => array( $this, 'bulk_action_permissions_check' ),
		),
	) );
	register_rest_route( $namespace, '/' . $base . '/schema', array(
		'methods'  => WP_REST_Server::READABLE,
		'callback' => array( $this, 'get_public_item_schema' ),
	) );
  }


  /**
   * Retrieves the item's schema, conforming to JSON Schema.
   *
   * @since 4.7.0
   *
   * @return array Item schema data.
   */
  public function get_item_schema() {
	return $this->add_additional_fields_schema( array() );
  }

  /**
   * Get a collection of items
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|WP_REST_Response
   */
  public function get_items( $request ) {
	include_once [prefix/]_PATH.'includes/[prefix/]_db.php';
	$page=$request->get_param('page');
	$per_page=$request->get_param('per_page');
	$search=$request->get_param('search');
	$sort=$request->get_param('sort');
	$select=$request->get_param('select');
	$where=null;
	$db=[prefix/]_db::get_db();

	if ($this->page_key) {
		$list=[prefix/]_Models::get_page($this->page_key)->listView;
	  	$where=$list->where;
	}
	$result = $db->fetch_data($this->entity_key, explode(',',$select),$search,$where,$sort,$per_page,$per_page*($page-1));
	['$items=$result["items"];'/]
	$data = array();
	foreach( $items as $item ) {
	  $itemdata = $this->prepare_item_for_response( $item, $request );
	  $data['[]'/] = $this->prepare_response_for_collection( $itemdata );
	}
	['$result["items"]'/]=$data;
	return new WP_REST_Response( $result, 200 );
  }

  public function get_items_mini( $request ) {
	include_once [prefix/]_PATH.'includes/[prefix/]_db.php';
	$db=[prefix/]_db::get_db();
	$entity= [prefix/]_Models::get_entity($this->entity_key);
	$fields_to_select= $entity->get_in_title_fields_key();
	$result = $db->fetch_data($this->entity_key,$fields_to_select);
	['$items=$result["items"];'/]
	$data = array();
	foreach( $items as $item ) {
	  $itemdata = $this->prepare_item_for_response( $item, $request );
	  $data['[]'/] = $this->prepare_response_for_collection( $itemdata );
	}
	['$result["items"]'/]=$data;
	return new WP_REST_Response( $result, 200 );
  }

  /**
   * Get one item from the collection
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|WP_REST_Response
   */
  public function get_item( $request ) {
	include_once [prefix/]_PATH.'includes/[prefix/]_db.php';
	$id = $request->get_param('id');
	$select = $request->get_param('select');
	$db=[prefix/]_db::get_db();
	$result =$db->fetch_data($this->entity_key,explode(',',$select),null,"{$this->entity_key}.id=$id",null,1,0);
	['$data = $this->prepare_item_for_response( $result["items"][0], $request );'/]
	return new WP_REST_Response( $data, 200 );
  }

  /**
   * Create one item from the collection
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|WP_REST_Response
   */
  public function create_item( $request ) {
	include_once [prefix/]_PATH.'includes/[prefix/]_db.php';
	$db=[prefix/]_db::get_db();
	$item = $this->prepare_item_for_database( $request );
	$id=$db->mutation_item($item,$this->entity_key);
	return new WP_REST_Response( array('id'=>$id), 200 );
  }

  /**
   * Update one item from the collection
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|WP_REST_Response
   */
  public function update_item( $request ) {
	include_once [prefix/]_PATH.'includes/[prefix/]_db.php';
	$db=[prefix/]_db::get_db();
	$item = $this->prepare_item_for_database( $request );
	$id=$db->mutation_item($item,$this->entity_key);
	return new WP_REST_Response( array('id'=>$id), 200 );
  }

  /**
   * Delete one item from the collection
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|WP_REST_Response
   */
  public function delete_item( $request ) {
	include_once [prefix/]_PATH.'includes/[prefix/]_db.php';
	$db=[prefix/]_db::get_db();
	['$id=$request->get_json_params()["id"]'/];
	if (!$id) return new WP_Error('cant-delete', __('not permit!','[prefix/]'),  array( 'status' => 400 )  );
	$result=$db->delete_item($id,$this->entity_key);
	return new WP_REST_Response( array('id'=>$result), 200 );
  }

  public function permissions_check( $request ) {
	//return true;// <--use to make readable by all
[if(plg.hasAccessControl)]
	if ($this->page_key) $key='[prefix/]_page_'.$this->page_key;
	else $key='[prefix/]_ws_'.$this->entity_key;
	$attr=$request->get_attributes();
	$clbk= ['$attr[\'callback\'][1]'/];
	switch ($clbk){
	  case 'get_item':$key.='_view';
		break;
	  case 'get_items_mini':
	  case 'get_items':$key.='_list';
		break;
	  case 'create_item':$key.='_create';
		break;
	  case 'update_item':$key.='_edit';
		break;
	  case 'delete_item':$key.='_delete';
		break;
	  case 'bulk_action': $key='[prefix/]_bulk_'.$this->page_key.'_'.$request->get_param('key');
		break;
	}
	return current_user_can($key);
	
[else]
	return true; 
[/if]
  }

  /**
   * Check if a given request has access to get items
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|bool
   */
  public function get_items_permissions_check( $request ) {
	return $this->permissions_check($request);
  }

  /**
   * Check if a given request has access to get a specific item
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|bool
   */
  public function get_item_permissions_check( $request ) {
	return $this->permissions_check($request);
  }

  /**
   * Check if a given request has access to create items
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|bool
   */
  public function create_item_permissions_check( $request ) {
	return $this->permissions_check($request);
  }

  /**
   * Check if a given request has access to update a specific item
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|bool
   */
  public function update_item_permissions_check( $request ) {
	return  $this->permissions_check($request);
  }

  /**
   * Check if a given request has access to delete a specific item
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|bool
   */
  public function delete_item_permissions_check( $request ) {
	return $this->permissions_check($request);
  }

  /**
   * Prepare the item for create or update operation
   *
   * @param WP_REST_Request $request Request object
   * @return WP_Error|object $prepared_item
   */
  protected function prepare_item_for_database( $request ) {
    $item= $request->get_json_params();
    $prepared_item=array();
    $entity=[prefix/]_Models::get_entity($this->entity_key);
    foreach ($item as $key=>$value){
      if ($key=='id'){
		$prepared_item['[\'id\']'/]=$value;
        continue;
      }
      $field_type=$entity->get_field_type($key);
      ['$prepared_item[$key]'/]=$field_type->to_db($item,$key,$value);
	}
    return $prepared_item;
  }

  /**
   * Prepare the item for the REST response
   *
   * @param mixed $item WordPress representation of the item.
   * @param WP_REST_Request $request Request object.
   * @return mixed
   */
  public function prepare_item_for_response( $item, $request ) {
	$prepared_item=array();
	$entity=[prefix/]_Models::get_entity($this->entity_key);
	foreach ($item as $key=>$value){
	  if ($key=='id'){
		$prepared_item['[\'id\']'/]=$value;
		continue;
	  }
	  $field_type=$entity->get_field_type($key);
	  ['$prepared_item[$key]'/]=$field_type->from_db($item,$key,$value);
	}
	return $prepared_item;
  }


  public function bulk_action( $request ) {
	$key= $request->get_param('key');
	$items= $request->get_json_params();
	$func="bulk_action_$key";
	if(method_exists($this, $func)){
	  $result = call_user_func(array($this, $func),$request,$items);
	  return $result;
	}
	return new WP_Error('not exist', __('Action not exist','[prefix/]'),  array( 'status' => 404 )  );
  }
  public function bulk_action_delete( $request,$items ) {


	include_once [prefix/]_PATH.'includes/[prefix/]_db.php';
	$db=[prefix/]_db::get_db();

	global $wpdb;
	$page=[prefix/]_Models::get_page($this->page_key);
	$ids=array();
	foreach ($items as $key=>$item){
	  ['$ids[]=$db->delete_item($item["id"],$page->entity_key);'/]
	}
	return new WP_REST_Response( array('count'=>count($ids),'ids'=>$ids,'message'=>__('Selected items removed!')), 200 );
  }
  public function bulk_action_permissions_check( $request ) {
	return $this->permissions_check($request);;
  }

	/**
	 * Retrieves the query params for the collections.
	 *
	 * @since 4.7.0
	 *
	 * @return array Query parameters for the collection.
	 */
  public function get_collection_params()
  {
	$params = parent::get_collection_params();
	['$params["sort"] = array('/]
		'description' => __('List orderby','[td/]'),
		'type' => 'string',
		'sanitize_callback' => 'sanitize_text_field',
		'validate_callback' => 'rest_validate_request_arg',
	);

	if($this->page_key) {
	  $page = [prefix/]_Models::get_page($this->page_key);
	  $select=$page->get_list_view()->columns;
	}
	else {
	  $entity= [prefix/]_Models::get_entity($this->entity_key);
	  $select=$entity->get_all_fields_key();
	}
	['$params["select"] = array('/]
		'description' => __('Select fields for projection separate by `,`','[td/]'),
		'type' => 'string',
		'default'=> implode(",",$select),
		'sanitize_callback' => 'sanitize_text_field',
		'validate_callback' => 'rest_validate_request_arg',
	);
	return $params;
  }

	/**
	 * Retrieves the query params for the item.
	 *
	 * @since 4.7.0
	 *
	 * @return array Query parameters for the collection.
	 */
  public function get_item_params()
  {
	if ($this->page_key) {
	  $page = [prefix/]_Models::get_page($this->page_key);
	  $layouts=$page->get_form_view()->fieldsLayouts;
	  $select=array();
	  ['foreach ($layouts as $key=>$val) $select[$key]=$key;'/]
	} else {
	  $entity = [prefix/]_Models::get_entity($this->entity_key);
	  $select = $entity->get_all_fields_key();
	}
	$params = array(
		"id" => array(
			'description' => __('Item id', '[td/]'),
			'type' => 'integer',
			'default' => 0,
			'minimum' => 1,
			'sanitize_callback' => 'absint',
			'validate_callback' => 'rest_validate_request_arg',
		),
		'select' => array(
			'description' => __('Select fields for projection separate by `,`', '[td/]'),
			'type' => 'string',
			'default' => implode(",", $select),
			'sanitize_callback' => 'sanitize_text_field',
			'validate_callback' => 'rest_validate_request_arg',
		)

	);
	return $params;
  }
}

[/file]


[for(entity:crudrest::Entity|plg.serviceProvider.entityModel)]
[file (directory+'/ws/'+ prefix +'_controller_'+entity.key+'.php', false, 'UTF-8')]
<?php

 /**
 * Controller class for "[entity.key/]" REST webservice.
 *
[plg.getCopyrightComment(plg,'4.7.0')/]
 */

require_once('[prefix/]_controller.php');

class [prefix +'_controller_'+entity.key/] extends  [prefix/]_controller {

  public function __construct() {
	parent::__construct('[entity.key/]','[entity.key/]',null,1);
  }
 
}

[/file]
[/for]

[for(page:crudrest::UIPage|plg.gui.page)]
[file (directory+'/ws/'+ prefix +'_controller_page_'+page.key+'.php', false, 'UTF-8')]
<?php

 /**
 * Controller class for "[page.key/]" Page REST webservice.
 *
[plg.getCopyrightComment(plg,'4.7.0')/]
 */

require_once('[prefix/]_controller.php');

class [prefix +'_controller_page_'+page.key/] extends [prefix/]_controller {

  public function __construct() {
	parent::__construct('page_[page.key/]','[page.entity.key/]','[page.key/]',1);
  }
[for(bulk:crudrest::BulkAction|page.list.bulkAction)]

  public function bulk_action_[bulk.key/]( $request,$items ) {
	
	return new WP_REST_Response( array('count'=>count($items),'message'=>__('Action done!')), 200 );
  }
[/for]
}

[/file]
[/for]

[file (directory+'/ws/'+ prefix +'_page_controller.php', false, 'UTF-8')]
<?php

 /**
 * Controller class for Page model meta REST webservice.
 *
[plg.getCopyrightComment(plg,'4.7.0')/]
 */
class [prefix +'_page_controller'/] extends WP_REST_Controller {

 /**
 * Register the routes for the objects of the controller.
 */
  public function register_routes() {

	$version = '1';
	$namespace = '[prefix/]/v' . $version;
	$base = 'page';

	register_rest_route( $namespace, '/' . $base.'['/(?P<page_key>[a-zA-Z0-9]+)'/]', array(
		array(
			'methods'             => WP_REST_Server::READABLE,
			'callback'            => array( $this, 'get_item' ),
			'permission_callback' => array( $this, 'get_item_permissions_check' ),
			'args'                => array(

			),
		),
	) );

	register_rest_route( $namespace, '/' . $base, array(
		array(
			'methods'             => WP_REST_Server::READABLE,
			'callback'            => array( $this, 'get_items' ),
			'permission_callback' => array( $this, 'get_items_permissions_check' ),
			'args'                => array(

			),
		),
	) );

	register_rest_route( $namespace, '/admin-menu/['(?P<slug>[a-zA-Z0-9]+)'/]', array(
		array(
			'methods'             => WP_REST_Server::READABLE,
			'callback'            => array( $this, 'get_admin_menu' ),
			'permission_callback' => array( $this, 'get_items_permissions_check' ),
			'args'                => array(

			),
		),
	) );

  }

  /**
   * Get a collection of items
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|WP_REST_Response
   */
  public function get_items( $request ) {
	return new WP_REST_Response( array('pages'=>[prefix/]_Models::get_pages()), 200 );
  }

  /**
   * Get one item from the collection
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|WP_REST_Response
   */
  public function get_item( $request ) {
	//get parameters from request
	$params = $request->get_params();
	//$slugs=explode('_',$params['[\'page_key\']'/]) ;
	$item = [prefix/]_Models::get_page(['$params[\'page_key\']'/]);
	$item->entity=[prefix/]_Models::get_entity($item->entity_key);
	foreach ($item->entity->relations as $key=>$relation ){
	  $relation->title_script=[prefix/]_Models::get_entity($relation->entity)->title_script;
//	  $relation->entity=[prefix/]_Models::get_entity($relation->entity);
	}
	$data = $this->prepare_item_for_response( $item, $request );
	return new WP_REST_Response( $data, 200 );
  }

  public function get_admin_menu( $request ) {
	//get parameters from request
	$params = $request->get_params();
	$slug=['$params[\'slug\']'/];
	$admin_menus = [prefix/]_Models::get_admin_menus();
	$items=array();
	foreach ($admin_menus as $slug => $menu){
	  ['$items[$slug]=array(\'title\'=>$menu[\'title\'],\'icon\'=>$menu[\'icon\'],\'sub\'=>array());'/]
	  ['foreach ($menu[\'sub\'] as $itemSlug => $menuItem) {'/]
[if(plg.hasAccessControl)]
		['if (current_user_can(\''+prefix+'_page_\'.$menuItem[\'page_key\'].\'_list\')) $items[$slug][\'sub\'][$itemSlug]=$menuItem;'/]
[else]
		['$items[$slug][\'sub\'][$itemSlug]=$menuItem;'/]
[/if]
	  }
	}

	return new WP_REST_Response( $items, 200 );
  }

  /**
   * Check if a given request has access to get items
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|bool
   */
  public function get_items_permissions_check( $request ) {
	return true;
	//return current_user_can( 'edit_something' );
  }

  /**
   * Check if a given request has access to get a specific item
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|bool
   */
  public function get_item_permissions_check( $request ) {
	return $this->get_items_permissions_check( $request );
  }

  /**
   * Prepare the item for the REST response
   *
   * @param mixed $item WordPress representation of the item.
   * @param WP_REST_Request $request Request object.
   * @return mixed
   */
  public function prepare_item_for_response( $item, $request ) {
	return array($item->key=> (array)$item);
  }

}

[/file]


[file (directory+'/ws/'+ prefix +'_extend_controller.php', false, 'UTF-8')]
<?php

 /**
 * Controller class for extend REST webservice.
 *
[plg.getCopyrightComment(plg,'4.7.0')/]
 */
class [prefix/]_extend_controller extends WP_REST_Controller {

 /**
 * Register the routes for the objects of the controller.
 */
  public function register_routes() {
	$namespace = '[prefix/]';
	$base = 'extend';
[for(extend:WebserviceFunction|plg.serviceProvider.eContents(WebserviceFunction))]
	register_rest_route( $namespace, '/v1/' . $base.'[extend.name.toLowerCase() /]', array(
		array(
			'methods'             => array('[extend.method /]'),
			'callback'            => array( $this, '[extend.method.toString().toLowerCase()+'_'+extend.name.toLowerCase() /]' ),
[if(extend.checkAccessControl)]
			'permission_callback' => array( $this, '[extend.method.toString().toLowerCase()+'_'+extend.name.toLowerCase() /]_permission_check' ),
[/if]
		),
	) );
	
[/for]
  }

[for(extend:WebserviceFunction|plg.serviceProvider.eContents(WebserviceFunction))]

  /**
   * [extend.method/] [extend.name/]
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|WP_REST_Response
   */
  public function [extend.method.toString().toLowerCase()+'_'+extend.name.toLowerCase() /]( $request ) {
	$data = array();
	return new WP_REST_Response( $data , 200 );
  }
[if(extend.checkAccessControl)]

  /**
   * Check if a given request has access to [extend.method/] [extend.name.toLowerCase()/]
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|bool
   */
  public function [extend.method.toString().toLowerCase()+'_'+extend.name.toLowerCase() /]_permission_check( $request ) {
	return current_user_can('[prefix+'_ws_'+extend.method.toString().toLowerCase()+'_'+extend.name.toLowerCase()/]');
  }
[/if]
 
[/for]
}

[/file]
[if(plg.hasAccessControl)]
[file (directory+'/ws/'+ prefix +'_options_controller.php', false, 'UTF-8')]
<?php

 /**
 * Controller class for options REST webservice.
 *
[plg.getCopyrightComment(plg,'4.7.0')/]
 */
class [prefix/]_options_controller extends WP_REST_Controller {

 /**
 * Register the routes for the objects of the controller.
 */
  public function register_routes() {
	$namespace = '[prefix/]';
	$base = 'options';

	register_rest_route( $namespace, '/v1/'.$base, array(
		array(
			'methods'             => array('GET'),
			'callback'            => array( $this, 'get_meta' ),
			'permission_callback' => array( $this, 'permission_check' ),
		),
		array(
			'methods'             => array('POST'),
			'callback'            => array( $this, 'save' ),
			'permission_callback' => array( $this, 'permission_check' ),
		),
	) );
	
  }


  /**
   * 
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|WP_REST_Response
   */
  public function get_meta( $request ) {
	global $wp_roles;
	$roles = $wp_roles->roles;
	$caps= array('create'=>__('Create'),'list'=>__('List'), 'view'=>__('View'), 'delete'=>__('Remove'), 'edit'=>__('Edit'));
	$extends= array([for(extend:crudrest::WebserviceFunction|plg.serviceProvider.extend)][if(extend.checkAccessControl)]'[extend.method.toString().toLowerCase()+'_'+extend.name.toLowerCase()/]', [/if][/for]);
	$data = array('pages'=>[prefix/]_Models::get_pages(),'entities'=>[prefix/]_Models::get_entities(), 'roles'=>$roles,'caps'=>$caps, 'extends'=>$extends);
	return new WP_REST_Response( $data , 200 );
  }

  public function save( $request ) {
	$my_roles=$request->get_json_params();
	global $wp_roles;
	foreach ($my_roles as $key=>$caps){
	  $role = $wp_roles->get_role($key);
	  foreach ($caps as $ckey=>$cap)
	  {
		$role->add_cap($ckey,$cap==true);
	  }
	}
	return new WP_REST_Response( 'OK' , 200 );
  }

  /**
   * Check if a given request has access to plugin Options
   *
   * @param WP_REST_Request $request Full data about the request.
   * @return WP_Error|bool
   */
  public function permission_check( $request ) {
	$user = wp_get_current_user();
	$allowed_roles = array('administrator');
	return count(array_intersect($allowed_roles, $user->roles ))>0;
  }
 
}

[/file]
[/if]
[/template]
