[comment encoding = Cp1256 /]
[module webservice('http://crudrest.msde.ui.ac.ir')/]
[import crudrest::generator::main::service /]
[template public classes(plg : CrudRestPlugin,directory:String, prefix:String, td:String)]

[file (directory+'/includes/'+ prefix +'_activator.php', false, 'UTF-8')]
<?php
/**
 * Fired during plugin activation.
 *
 * This class defines all code necessary to run during the plugin's activation.
 *
[getCopyrightComment()/]
 */
class [prefix/]_Activator {

	/**
	 * Short Description. (use period)
	 *
	 * Long Description.
	 *
	 * @since    1.0.0
	 */
	public static function activate() {

	}

}
[/file]

[file (directory+'/includes/'+ prefix +'_deactivator.php', false, 'UTF-8')]
<?php
/**
 * Fired during plugin deactivation.
 *
 * This class defines all code necessary to run during the plugin's deactivation.
 *
[getCopyrightComment()/]
 */
class [prefix/]_Deactivator {

	/**
	 * Short Description. (use period)
	 *
	 * Long Description.
	 *
	 * @since    1.0.0
	 */
	public static function deactivate() {

	}

}
[/file]
[file (directory+'/includes/'+ prefix +'_i18n.php', false, 'UTF-8')]
<?php

/**
 * Define the internationalization functionality.
 *
 * Loads and defines the internationalization files for this plugin
 * so that it is ready for translation.
 *
[getCopyrightComment()/]
 */
class [prefix/]_i18n {


	/**
	 * Load the plugin text domain for translation.
	 *
	 * @since    1.0.0
	 */
	public function load_plugin_textdomain() {

		load_plugin_textdomain(
			'[prefix/]',
			false,
			dirname( dirname( plugin_basename( __FILE__ ) ) ) .'/[getLanguagesDirectory()/]/'
		);
	}
}
[/file]
[file (directory+'/includes/'+ prefix +'_loader.php', false, 'UTF-8')]
<?php

/**
 * Register all actions and filters for the plugin.
 *
 * Maintain a list of all hooks that are registered throughout
 * the plugin, and register them with the WordPress API. Call the
 * run function to execute the list of actions and filters.
 *
[getCopyrightComment()/]
 */
class [prefix/]_Loader {

	/**
	 * The array of actions registered with WordPress.
	 *
	 * @since    1.0.0
	 * @access   protected
	 * @var      array    $actions    The actions registered with WordPress to fire when the plugin loads.
	 */
	protected $actions;

	/**
	 * The array of filters registered with WordPress.
	 *
	 * @since    1.0.0
	 * @access   protected
	 * @var      array    $filters    The filters registered with WordPress to fire when the plugin loads.
	 */
	protected $filters;

	/**
	 * Initialize the collections used to maintain the actions and filters.
	 *
	 * @since    1.0.0
	 */
	public function __construct() {

		$this->actions = array();
		$this->filters = array();

	}

	/**
	 * Add a new action to the collection to be registered with WordPress.
	 *
	 * @since    1.0.0
	 * @param    string               $hook             The name of the WordPress action that is being registered.
	 * @param    object               $component        A reference to the instance of the object on which the action is defined.
	 * @param    string               $callback         The name of the function definition on the $component.
	 * @param    int                  $priority         Optional. The priority at which the function should be fired. Default is 10.
	 * @param    int                  $accepted_args    Optional. The number of arguments that should be passed to the $callback. Default is 1.
	 */
	public function add_action( $hook, $component, $callback, $priority = 10, $accepted_args = 1 ) {
		$this->actions = $this->add( $this->actions, $hook, $component, $callback, $priority, $accepted_args );
	}


  public function add_menu($page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '', $position = null){
//	  echo 'ewewewe'.add_menu_page;
	add_menu_page(__($page_title, '[td/]'), __( $menu_title, '[prefix/]'), $capability, $menu_slug, $function,$icon_url,$position);
  }

  public function add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $function = '', $position = null){
	add_submenu_page($parent_slug,__($page_title, '[prefix/]'),__( $menu_title, '[prefix/]'),$capability, $menu_slug, $function, $position);
  }


  /**
	 * Add a new filter to the collection to be registered with WordPress.
	 *
	 * @since    1.0.0
	 * @param    string               $hook             The name of the WordPress filter that is being registered.
	 * @param    object               $component        A reference to the instance of the object on which the filter is defined.
	 * @param    string               $callback         The name of the function definition on the $component.
	 * @param    int                  $priority         Optional. The priority at which the function should be fired. Default is 10.
	 * @param    int                  $accepted_args    Optional. The number of arguments that should be passed to the $callback. Default is 1
	 */
	public function add_filter( $hook, $component, $callback, $priority = 10, $accepted_args = 1 ) {
		$this->filters = $this->add( $this->filters, $hook, $component, $callback, $priority, $accepted_args );
	}

	/**
	 * A utility function that is used to register the actions and hooks into a single
	 * collection.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @param    array                $hooks            The collection of hooks that is being registered (that is, actions or filters).
	 * @param    string               $hook             The name of the WordPress filter that is being registered.
	 * @param    object               $component        A reference to the instance of the object on which the filter is defined.
	 * @param    string               $callback         The name of the function definition on the $component.
	 * @param    int                  $priority         The priority at which the function should be fired.
	 * @param    int                  $accepted_args    The number of arguments that should be passed to the $callback.
	 * @return   array                                  The collection of actions and filters registered with WordPress.
	 */
	private function add( $hooks, $hook, $component, $callback, $priority, $accepted_args ) {

		$hooks ['[]'/] = array(
			'hook'          => $hook,
			'component'     => $component,
			'callback'      => $callback,
			'priority'      => $priority,
			'accepted_args' => $accepted_args
		);

		return $hooks;

	}

	/**
	 * Register the filters and actions with WordPress.
	 *
	 * @since    1.0.0
	 */
	public function run() {

		foreach ( $this->filters as $hook ) {
			add_filter( $hook['['/]'hook'[']'/], array( $hook['['/]'component'[']'/], $hook['['/]'callback'[']'/] ), $hook['['/]'priority'[']'/], $hook['['/]'accepted_args'[']'/] );
		}

		foreach ( $this->actions as $hook ) {
			add_action( $hook['['/]'hook'[']'/], array( $hook['['/]'component'[']'/], $hook['['/]'callback'[']'/] ), $hook['['/]'priority'[']'/], $hook['['/]'accepted_args'[']'/] );
		}

	}

}

[/file]
[file (directory+'/includes/'+ prefix +'_ListView.php', false, 'UTF-8')]
<?php
/**
 * Class for ListView (grid view) configuration.
 *
[getCopyrightComment()/]
 */
include_once '[prefix/]_Models.php';
include_once '[prefix/]_Field.php';
include_once '[prefix/]_Relation.php';
class [prefix/]_ListView {
  public $props= array('createButton'=>true,'editButton'=>true,'searchBox'=>true,'detailButton'=>false,'deleteButton'=>true,'itemsPerPage'=>10);
  public $columns= array();
  public $searchable= array();
  public $sortable= array();
  public $bulk= array();
  public $entity_key,$title,$where;

  public function __construct($entity_key,$title,$columns,$sortableColumns,$searchableColumns,$props=null,$bulkActions=null,$where=null)
  {
    if ($props!=null)$this->props=$props;
    if($bulkActions!=null) $this->bulk=$bulkActions;
    else if ($bulkActions==null&&$this->props['[\'deleteButton\']'/])$this->bulk=['[\'delete\'=>[\'title\'=>\'Remove All\',\'icon\'=>\'trash\']]'/]; 
    $this->entity_key=$entity_key;
    $this->title=$title;
    $this->props=$props;
    $this->columns=$columns;
    $this->sortable=$sortableColumns;
    $this->searchable=$searchableColumns;
    $this->where=$where;
  }
 
  public function getEntity(){
	return [prefix/]_Models::get_entity($this->entity_key);
  }
}
[/file]
[file (directory+'/includes/'+ prefix +'_FormView.php', false, 'UTF-8')]
<?php
/**
 * Class for page detiale mode (form view) configuration.
 *
[getCopyrightComment()/]
 */
include_once '[prefix/]_Models.php';

class [prefix/]_FormView {

  public $fieldsLayouts=['[]'/];
  public $entity_key;

  public function __construct($entity_key,$fieldsLayouts)
  {
    $this->entity_key=$entity_key;
    $this->fieldsLayouts=$fieldsLayouts;
   
  }
}
[/file]
[file (directory+'/includes/'+ prefix +'_Page.php', false, 'UTF-8')]
<?php
/**
 * Class for Page configuration.
 *
[getCopyrightComment()/]
 */
include_once '[prefix/]_Models.php';
include_once '[prefix/]_FormView.php';
include_once '[prefix/]_ListView.php';
class [prefix/]_Page {

  public $key,$title,$entity_key,$listView,$formView;

  public function __construct($key,$entity_key,$title)
  {
	$this->key=$key;
    $this->entity_key=$entity_key;
    $this->title=$title;
  }
  public function set_formView($fieldsLayouts){
    $this->formView=new [prefix/]_FormView($this->entity_key,$fieldsLayouts);
  }
  public function set_listView($columns,$sortableColumns,$searchableColumns,$props=null,$bulkActions=null,$where=null){
    $this->listView=new [prefix/]_ListView($this->entity_key,$this->title,$columns,$sortableColumns,$searchableColumns,$props,$bulkActions,$where);
  }
  public function renderList(){
	if (array_key_exists('id',$_REQUEST) && $_REQUEST['["id"]'/]) include  [prefix/]_PATH.'admin/partials/[prefix/]-admin-page-form.php';
	else include  [prefix/]_PATH.'admin/partials/[prefix/]-admin-page-list.php';
  }
  public function get_form_view():[prefix/]_FormView{
    return $this->formView;
  }
  public function get_list_view():[prefix/]_ListView{
    return $this->listView;
  }
  public function get_entity():[prefix/]_Entity{
	return [prefix/]_Models::get_entity($this->entity_key);
  }
}
[/file]
[file (directory+'/includes/'+ prefix +'_Entity.php', false, 'UTF-8')]
<?php
/**
 * Class for entity.
 *
[getCopyrightComment()/]
 */

include_once '[prefix/]_FieldBase.php';
include_once '[prefix/]_Field.php';
include_once '[prefix/]_Relation.php';
include_once '[prefix/]_field_type.php';
class [prefix/]_Entity {
  public $fields=['[]'/];
  public $relations=['[]'/];
  public $key, $label='', $plural='', $title_script='';

  public function __construct($key,$label,$plural,$title_script=null)
  {
    $this->key=$key;
    $this->label=$label;
    $this->plural=$plural;
	$this->title_script=$title_script;
  }
  public function get_all_fields_key():array{
    $all=array();
    foreach ($this->fields as $key=>$field) ['$all[$key]'/]=$key;
    foreach ($this->relations as $key=>$field) ['$all[$key]'/]=$key;
    return $all;
  }
  public function get_in_title_fields_key():array{
	$fields=$this->get_all_fields_key();
	$fields_to_select= array();
	foreach( $fields as $field ) {
	  if (strpos($this->title_script, $field) != false) {
		['$fields_to_select[]=$field;'/]
	  }
	}
	return $fields_to_select;
  }
  public function add_field($key,$field){
    $this->fields['[$key]'/]=$field;
  }
  public function set_fields($fields){
	$this->fields=$fields;
  }
  public function add_relation($key,$relation){
	$this->relations['[$key]'/]=$relation;
  }
  public function get_relation($key): ?[prefix/]_Relation{
	if (array_key_exists($key, $this->relations)) return $this->relations['[$key]'/];
	return null;
  }
  public function get_field($key): ?[prefix/]_FieldBase{
	if (array_key_exists($key, $this->fields)) return $this->fields['[$key]'/];
	if (array_key_exists($key, $this->relations)) return $this->relations['[$key]'/];
	return null;
  }
  public function get_field_type($key): ?[prefix/]_field_type{
	return [prefix/]_field_type::get($this->get_field($key)->type);
  }
}
[/file]
[file (directory+'/includes/'+ prefix +'_FieldBase.php', false, 'UTF-8')]
<?php
/**
 * Base class for Fields and Relations.
 *
[getCopyrightComment()/]
 */

class [prefix/]_FieldBase
{
  public $key;
  public $label='';
  public $index=false;
  public $unique=false;
  public $required=false;
  public $type='';
[comment]  public $visible=true;
  public $sortable=true;
  public $searchable=true;[/comment]

  public function __construct($key,$type,$label,$index,$unique,$required)
  {
    $this->key=$key;
	$this->type=$type;
    $this->label=$label;
    $this->index=$index;
    $this->unique=$unique;
    $this->required=$required;
  }
}
[/file]
[file (directory+'/includes/'+ prefix +'_Field.php', false, 'UTF-8')]
<?php
/**
 * Class for Entity's Fields.
 *
[getCopyrightComment()/]
 */
include_once '[prefix/]_FieldBase.php';

class [prefix/]_Field extends [prefix/]_FieldBase
{
  
  public function __construct($key,$type,$label=null,$index=false,$unique=false,$required=false)
  {
   
	parent::__construct($key,$type,$label??$key,$index,$unique,$required);

  }

}
[/file]
[file (directory+'/includes/'+ prefix +'_Relation.php', false, 'UTF-8')]
<?php
/**
 * Class for Entity's Relations.
 *
[getCopyrightComment()/]
 */
include_once '[prefix/]_FieldBase.php';
include_once '[prefix/]_Entity.php';
class [prefix/]_Relation extends [prefix/]_FieldBase
{
  public $many;
  public $entity;
  public $opposite;
  public $join_table;
  public $join_s_key;
  public $join_t_key;

  public function __construct($key,$entity,$opposite,$join_table,$join_s_key,$join_t_key,$label,$many,$index,$unique,$required=false)
  {
	parent::__construct($key,'relation',$label,$index,$unique,$required);
    $this->many=$many;
    $this->entity=$entity;
    $this->opposite=$opposite;
    $this->join_table=$join_table;
    $this->join_t_key=$join_t_key;
    $this->join_s_key=$join_s_key;
  }

}

[/file]
[/template]
